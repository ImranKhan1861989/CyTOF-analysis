#Combining multiple CyTOF FCS files into a single CSV file involves loading each FCS file, converting them to a common format (e.g., a pandas DataFrame), and then concatenating these DataFrames before saving the result as a CSV file. 
#Hereâ€™s a step-by-step guide to achieve this in Python using the FlowCal library:

pip install FlowCal pandas
import FlowCal
import pandas as pd
import os

# Define the directory containing the FCS files
fcs_directory = 'path_to_your_fcs_files_directory'

# Initialize an empty list to store DataFrames
data_frames = []

# Loop over each file in the directory
for filename in os.listdir(fcs_directory):
    if filename.endswith('.fcs'):
        # Load the FCS file
        data = FlowCal.io.FCSData(os.path.join(fcs_directory, filename))
        # Convert to a pandas DataFrame
        df = data.to_pandas()
        # Add a column for the sample ID (optional)
        df['SampleID'] = filename
        # Append the DataFrame to the list
        data_frames.append(df)

# Concatenate all DataFrames into a single DataFrame
combined_df = pd.concat(data_frames, ignore_index=True)

# Save the combined DataFrame to a CSV file
combined_df.to_csv('combined_cytof_data.csv', index=False)

print("Combined CSV file saved successfully.")






import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# Load CyTOF data
# Assume 'cytof_data.csv' is the file containing CyTOF data
data = pd.read_csv('cytof_data.csv')

# Preprocessing: Standardize the data
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)

# Dimensionality Reduction using PCA
pca = PCA(n_components=2)
pca_result = pca.fit_transform(data_scaled)

# Dimensionality Reduction using t-SNE
tsne = TSNE(n_components=2, perplexity=30, n_iter=300)
tsne_result = tsne.fit_transform(data_scaled)

# Clustering (e.g., KMeans)
from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=5)
clusters = kmeans.fit_predict(data_scaled)

# Visualization
plt.figure(figsize=(16, 7))

# PCA Plot
plt.subplot(1, 2, 1)
sns.scatterplot(x=pca_result[:, 0], y=pca_result[:, 1], hue=clusters, palette='viridis')
plt.title('PCA of CyTOF Data')
plt.xlabel('PCA1')
plt.ylabel('PCA2')

# t-SNE Plot
plt.subplot(1, 2, 2)
sns.scatterplot(x=tsne_result[:, 0], y=tsne_result[:, 1], hue=clusters, palette='viridis')
plt.title('t-SNE of CyTOF Data')
plt.xlabel('t-SNE1')
plt.ylabel('t-SNE2')

plt.show()
